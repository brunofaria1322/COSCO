- hosts: localhost
  tasks:

    - name: Create Server VM 
      os_server:
        state: present
        name: "Fog Server"
        image: '{{image}}'
        key_name: '{{key_name}}' 
        flavor: 'm2.tiny'
        network: '{{network}}'
        security_groups: default
        boot_from_volume: True
        volume_size: 20
        timeout: 200
      register: openstackmaster
     

    - name: Create temporary inventory for ssh wait
      add_host:
        name: "server"
        groups: vms, master
        ansible_host: "{{ openstackmaster.openstack.public_v4 }}"
        ansible_user: ubuntu
        ansible_ssh_common_args: > 
          -o BatchMode=yes
          -o UserKnownHostsFile=/dev/null
          -o StrictHostKeyChecking=no

    - name: Create WorkerVMs
      os_server:
        state: present
        name: 'Worker_{{item}}'
        image: '{{image}}'
        key_name: '{{key_name}}' 
        flavor: '{{item}}'
        network: '{{network}}'
        security_groups: default
        boot_from_volume: True
        volume_size: 20
        timeout: 200
      register: openstackworker
      loop: "{{ flavor }}"

    - name: Create temporary inventory for ssh wait
      add_host:
        name: "{{ item.openstack.name }}"
        groups: vms, worker
        ansible_host: "{{ item.openstack.public_v4 }}"
        ansible_user: ubuntu
        ansible_ssh_common_args: > 
          -o BatchMode=yes
          -o UserKnownHostsFile=/dev/null
          -o StrictHostKeyChecking=no
      with_items: "{{ openstackworker.results }}"

- hosts: master
  gather_facts: no
  tasks:
    - name: Wait for ssh to wake up
      wait_for_connection:
         timeout: 200

- hosts: worker
  gather_facts: no
  tasks:
    - name: Wait for ssh to wake up
      wait_for_connection:
         timeout: 200


- hosts: master
  gather_facts: no
  
  tasks:
    - name: Copy project directory to the remote server
      remote_user: "ubuntu"
      copy:
        src: "{{src}}" 
        dest: "{{dest}}"
    
    - name: Create the system service for flask server- Part1
      shell: 'sudo cp ~/Server/flask.conf /etc/init.d/'
        
    - name: Create the system service for flask server- Part2
      shell: 'sudo cp ~/Server/flask.service /lib/systemd/system/flask.service'

    - name: Install aptitude using apt
      become: yes
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      become: yes
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']
    
    - name: Installing flask_restful
      pip: 
        name: flask-restful
    
    - name: Installing redis-py
      pip: 
        name: redis
    
    - name: Installing inotify
      pip: 
        name: inotify
       
    - name: Installing Flask
      pip: 
        name: Flask
    - name: Change file ownership, group and permissions
      file: dest=~/Server/apiserver.py mode=a+x
      

    - name: Start service flask, if not started
      become: yes
      systemd:
        name: flask
        state: started

- hosts: worker
  gather_facts: no
  tasks:
    - name: Wait for ssh to wake up
      wait_for_connection:
         timeout: 200

- hosts: worker
  gather_facts: no
  
  tasks:
    - name: Wait for ssh to wake up
      wait_for_connection:
         timeout: 200
    - name: Copy project directory to the remote server
      remote_user: "ubuntu"
      copy:
        src: "{{src}}" 
        dest: "{{dest}}"
    
    - name: Create the system service for flask server- Part1
      shell: 'sudo cp ~/Server/flask.conf /etc/init.d/'
        
    - name: Create the system service for flask server- Part2
      shell: 'sudo cp ~/Server/flask.service /lib/systemd/system/flask.service'

    - name: Install aptitude using apt
      become: yes
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      become: yes
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']
    
    - name: Installing flask_restful
      pip: 
        name: flask-restful
    
    - name: Installing redis-py
      pip: 
        name: redis
    
    - name: Installing inotify
      pip: 
        name: inotify
       
    - name: Installing Flask
      pip: 
        name: Flask
    - name: Change file ownership, group and permissions
      file: dest=~/Server/apiserver.py mode=a+x
      

    - name: Start service flask, if not started
      become: yes
      systemd:
        name: flask
        state: started

    - name: Create target directory 
      file: 
           path=/etc/docker/ 
           state=directory 
           mode=0755

    - name: configure docker network address, ahead of time, to solve issues with docker default network collision with UT VPN
      copy:
        src: daemon.json
        dest: /etc/docker/daemon.json
        owner: root
        group: root
        mode: '0644'

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest


    - name: Install Docker Module for Python
      pip:
        name: docker

        
