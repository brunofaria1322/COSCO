- hosts: localhost
  vars:
    ip : []

  tasks:

    - name: Add all virtaulbox as a ansible hosts
      add_host:
        name: '{{ item }}'
        groups: vms
      loop: "{{ ip }}"


    - name: Create temporary inventory for ssh wait
      add_host:
        name: "{{ item.openstack.name }}"
        groups: vms, worker
        ansible_host: "{{ item.openstack.public_v4 }}"
        ansible_user: ubuntu

        ansible_ssh_common_args: > 
          -o BatchMode=yes
          -o UserKnownHostsFile=/dev/null
          -o StrictHostKeyChecking=no
      with_items: "{{ openstackworker.results }}"
    
    
    - name: Add IP's in to list.
      set_fact:
        ip : "{{ ip }} + [ '{{ item.openstack.public_v4 }}' ]"
      with_items: "{{ openstackworker.results  }}"

    - name: Add IP list in to config file
      ini_file: dest=/home/ubuntu/DockerConOpenstack/config.cfg section=HOSTS option=IP value="{{ip}}" 
      tags: configuration 
  
   
  #  - name: Debug
  #    debug: 
  #      msg: "{{ item.openstack.name }}"
  #      with_items: "{{ openstackworker.results }}"
- hosts: vms
  gather_facts: no
  vars:
    IPS : []
    RAM_read : []
    RAM_write : []
    DISK_read : []
    DISK_write : []

  tasks:
    - name: Wait for ssh to wake up
      become: yes
      wait_for_connection:
         timeout: 200
    - name: Copy project directory to the remote server
      remote_user: "ubuntu"
      copy:
        src: "~/DockerConOpenstack/agent" 
        dest: "{{dest}}"
    
    - name: Create the system service for flask server- Part1
      shell: 'sudo cp ~/agent/flask.conf /etc/init.d/'
        
    - name: Create the system service for flask server- Part2
      shell: 'sudo cp ~/agent/flask.service /lib/systemd/system/flask.service'

    - name: Install aptitude using apt
      become: yes
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      become: yes
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'criu','software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools','linux-tools-generic', 'linux-tools-4.15.0-72-generic','sysbench']
    
    - name: Installing flask_restful
      pip: 
        name: flask-restful
    
    - name: Installing redis-py
      pip: 
        name: redis
    
    - name: Installing inotify
      pip: 
        name: inotify
       
    - name: Installing Flask
      pip: 
        name: Flask
    - name: Installing Flask
      pip: 
        name: psutil
    
    - name: Change file ownership, group and permissions
      file: dest=~/agent/agent.py mode=a+x
      

    - name: Create target directory 
      become: yes
      file: 
           path=/etc/docker/ 
           state=directory 
           mode=0755

    - name: configure docker network address, ahead of time, to solve issues with docker default network collision with UT VPN
      become: yes
      copy:
        src: daemon.json
        dest: /etc/docker/daemon.json
        owner: root
        group: root
        mode: '0644'

    - name: Add Docker GPG apt Key
      become: true
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      become: true
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      become: true
      apt: update_cache=yes name=docker-ce state=latest

    - name: Add user to docker group
      shell: 'sudo usermod -aG docker $USER'

 #  - name: Ensure group "somegroup" exists
  #   group:
  #      name: docker
  #      state: present

    - name: Install Docker Module for Python
      pip:
        name: docker

  #  - name: enable verbose mode
   #   ini_file: dest=~/agent/config.cfg section=global option=uuid value="{{item.uuid}}" 
   #   tags: configuration 
  #    loop: "{{ hosts_ }}"
    
    - name: Start service flask, if not started
      become: true
      systemd:
        name: flask
        state: started



        
