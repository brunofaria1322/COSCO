import ast
import time
import pandas as pd
import numpy as np
import json
import os
import matplotlib.pyplot as plt

import seaborn as sns

# sns color palette
COLOR_PALETTE = "hls"
sns.set_palette(COLOR_PALETTE)


from matplotlib.colors import ListedColormap


from sklearn.ensemble import ExtraTreesClassifier, RandomForestClassifier
from sklearn.feature_selection import SelectKBest, chi2, f_classif
from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn.metrics import (
    accuracy_score,
    classification_report,
    confusion_matrix,
    f1_score,
    make_scorer,
    precision_score,
    recall_score,
)

from cosco import (
    runCOSCO,
    NUM_SIM_STEPS,
    HOSTS,
    CONTAINERS,
    ROUTER_BW,
    INTERVAL_TIME,
    NEW_CONTAINERS,
    FAULT_RATE,
    FAULT_TIME,
    FAULT_INCREASE_TIME,
    RECOVER_TIME,
    FAULTY_HOSTS,
    FAILURE_TYPES,
    ACCUMULATIVE_FAULTS,
)

# from cosco import runCOSCO, NUM_SIM_STEPS, FAULT_INCREASE_TIME, FAULTY_HOSTS, ACCUMULATIVE_FAULTS

# FAULT_RATE = 0.3
# FAULT_TIME = 6
# RECOVER_TIME = 18


hosts_str = "".join([str(i) for i in FAULTY_HOSTS])
type_str = "acc" if ACCUMULATIVE_FAULTS else "rec"
fault_type_str = "".join([str(i[0]).lower() for i in FAILURE_TYPES])

DATAPATH = f"AI/tree/{NUM_SIM_STEPS}i_{FAULT_RATE}fr_{FAULT_TIME}ft_{RECOVER_TIME}rt_{FAULT_INCREASE_TIME}fit_hosts{hosts_str}_{type_str}_{fault_type_str}/"
FIGURES_PATH = f"{DATAPATH}/figures/"
CSV_PATH = f"logs/MyFog_MyAzure2019Workload_{NUM_SIM_STEPS}_{HOSTS}_{CONTAINERS}_{ROUTER_BW}_{INTERVAL_TIME}_{NEW_CONTAINERS}/hostinfo_with_interval.csv"

NUMBER_OF_SIMULATIONS = 30

NUMBER_OF_REPETITIONS = 50

SAVE_SVG = False


def generate_datasets():
    """
    Generates datasets for the AI by calling the COSCO simulator
    Will generate NUMBER_OF_SIMULATIONS datasets

    """
    # create datapath folder if it doesn't exist

    os.makedirs(os.path.dirname(DATAPATH), exist_ok=True)
    os.makedirs(os.path.dirname(DATAPATH + "data/"), exist_ok=True)
    os.makedirs(os.path.dirname(FIGURES_PATH), exist_ok=True)
    os.makedirs(os.path.dirname(FIGURES_PATH + "analysis/"), exist_ok=True)
    os.makedirs(os.path.dirname(FIGURES_PATH + "metrics/"), exist_ok=True)

    # old version (without multiprocessing)
    for i in range(NUMBER_OF_SIMULATIONS):
        datapath_i = f"{DATAPATH}data/data{i}.csv"
        # skip if log file already exists
        if os.path.isfile(datapath_i):
            continue

        print(f"Creating DATA {i+1} of {NUMBER_OF_SIMULATIONS}")
        # run simulation
        runCOSCO(prints=False)

        # copy log file to datapath
        os.system(f"cp {CSV_PATH} {datapath_i}")


def call_cosco(i):
    """
    Calls the COSCO simulator and saves the log file to the datapath (dataset)

    Parameters
    ----------
    i : int
        The index of the dataset to be generated
    """

    datapath_i = f"{DATAPATH}data/data{i}.csv"
    # skip if log file already exists
    if os.path.isfile(datapath_i):
        return

    print(f"Creating DATA {i+1} of {NUMBER_OF_SIMULATIONS}")
    # run simulation
    runCOSCO(prints=False)

    # copy log file to datapath
    # check if file exists
    if os.path.isfile(CSV_PATH):
        os.system(f"cp {CSV_PATH} {datapath_i}")


def evaluate_datasets(failure="cpu"):
    """
    Evaluates the datasets generated by the COSCO simulator



    """
    # EVALUATING DATA
    metrics_1 = [[], [], [], []]  # accuracy, precision, recall, f1
    metrics_all = [[], [], [], []]  # accuracy, precision, recall, f1
    metrics_12_3 = [[], [], [], []]  # accuracy, precision, recall, f1

    best_f1 = 0
    best_pred = None
    best_cpu = None

    metrics_path = FIGURES_PATH + "metrics/"

    for i in range(NUMBER_OF_SIMULATIONS):
        print(f"Evaluating DATA {i+1} of {NUMBER_OF_SIMULATIONS}")

        datapath_i = f"{DATAPATH}data/data{i}.csv"

        # read data
        data = pd.read_csv(datapath_i)

        # data has lists on each column. in this case, we want only the first element of each list
        # remove some columns that are not needed for now

        headers = [
            "interval",
            "cpu",
            "numcontainers",
            "baseips",
            "ipsavailable",
            "ipscap",
            "apparentips",
        ]

        data = data[headers + "cpufailures"]

        # create copies of data
        host1 = data.copy()
        host2 = data.copy()
        host3 = data.copy()

        for header in headers:
            host1[header] = host1[header].apply(lambda x: json.loads(x)[0])
            host2[header] = host2[header].apply(lambda x: json.loads(x)[1])
            host3[header] = host3[header].apply(lambda x: json.loads(x)[2])

        # count failures
        # print("Class distribution:")
        # print("Host1:\n", host1['cpufailures'].value_counts())
        # print("Host2:\n", host2['cpufailures'].value_counts())
        # print("Host3:\n", host3['cpufailures'].value_counts())

        # WORK WITH BINARY CLASSIFICATION
        host1["cpufailures"] = host1["cpufailures"].apply(lambda x: 1 if x > 0 else 0)
        host2["cpufailures"] = host2["cpufailures"].apply(lambda x: 1 if x > 0 else 0)
        host3["cpufailures"] = host3["cpufailures"].apply(lambda x: 1 if x > 0 else 0)

        # print("Class distribution after binary classification:")
        # print("Host1:\n", host1['cpufailures'].value_counts())
        # print("Host2:\n", host2['cpufailures'].value_counts())
        # print("Host3:\n", host3['cpufailures'].value_counts())

        # TRAIN AND EVALUATE ONLY ON HOST1
        metrics_temp, _ = train_and_evaluate(
            host1,
            "cpufailures",
            RandomForestClassifier(n_estimators=100, n_jobs=-1),
            binary=True,
        )
        metrics_1[0].extend(metrics_temp[0])
        metrics_1[1].extend(metrics_temp[1])
        metrics_1[2].extend(metrics_temp[2])
        metrics_1[3].extend(metrics_temp[3])

        # TRAIN AND EVALUATE ON ALL HOSTS TOGETHER

        # concatenate data
        all_hosts = pd.concat([host1, host2, host3])

        metrics_temp, _ = train_and_evaluate(
            all_hosts,
            "cpufailures",
            RandomForestClassifier(n_estimators=100, n_jobs=-1),
            binary=True,
        )
        metrics_all[0].extend(metrics_temp[0])
        metrics_all[1].extend(metrics_temp[1])
        metrics_all[2].extend(metrics_temp[2])
        metrics_all[3].extend(metrics_temp[3])
        # TRAIN ON HOSTS 1 AND 2, EVALUATE ON HOST 3

        # concatenate data
        host1_2 = pd.concat([host1, host2])

        metrics_temp, best_info = train_and_evaluate(
            host1_2,
            "cpufailures",
            RandomForestClassifier(n_estimators=100, n_jobs=-1),
            data_test=host3,
            binary=True,
        )
        metrics_12_3[0].extend(metrics_temp[0])
        metrics_12_3[1].extend(metrics_temp[1])
        metrics_12_3[2].extend(metrics_temp[2])
        metrics_12_3[3].extend(metrics_temp[3])

        if best_info[1] > best_f1:
            best_f1 = best_info[1]
            best_pred = best_info[0]
            best_cpu = host3["cpu"].values

    # plot histograms for f1 scores
    plt.figure()
    plt.hist(metrics_1[3], bins=10, alpha=0.5)
    plt.hist(metrics_all[3], bins=10, alpha=0.5)
    plt.hist(metrics_12_3[3], bins=10, alpha=0.5)
    plt.legend(["Host1", "All hosts", "Host1 and Host2"])
    plt.savefig(f"{metrics_path}/f1_scores.png")
    if SAVE_SVG:
        plt.savefig(f"{metrics_path}/f1_scores.svg")

    # plots for host1
    plot_metrics(metrics_1, "metrics_1")

    # plots for all hosts
    plot_metrics(metrics_all, "metrics_all")

    # plots for train on host1 and host2, test on host3
    plot_metrics(metrics_12_3, "metrics_12_3")

    # plot cpu usage with the color of the confusion label
    classes = []
    for i in range(len(best_pred)):
        if best_pred[i] == best_cpu.iloc[:, -1].values[i]:
            if best_pred[i] == 1:
                # True Positive
                classes.append(1)
            else:
                # True Negative
                classes.append(0)
        else:
            if best_pred[i] == 1:
                # False Positive
                classes.append(3)
            else:
                # False Negative
                classes.append(2)

    colors = ListedColormap(["blue", "green", "yellow", "orange"])

    plt.figure(figsize=(15, 5))
    scatter = plt.scatter(range(len(best_pred)), best_cpu, c=classes, cmap=colors)
    plt.xlabel("Time")
    plt.ylabel("CPU usage")
    plt.legend(
        handles=scatter.legend_elements()[0],
        loc="upper left",
        labels=["True Negative", "True Positive", "False Negative", "False Positive"],
    )

    plt.savefig(f"{metrics_path}/cpu_12_3.png")
    if SAVE_SVG:
        plt.savefig(f"{metrics_path}/cpu_12_3.svg")


def train_and_evaluate_big_data():
    data_temp = pd.read_csv(f"{DATAPATH}data/data0.csv")

    num_hosts = int(len(json.loads(data_temp["cpu"][0])) / 2)

    # create big data dataframe
    big_data = [pd.DataFrame() for _ in range(num_hosts)]

    for i in range(NUMBER_OF_SIMULATIONS):
        datapath_i = f"{DATAPATH}data/data{i}.csv"
        data_temp = pd.read_csv(datapath_i)
        # print(f'Number of hosts: {num_hosts}')

        data_temp = data_temp.drop(
            columns=["interval", "ram", "ramavailable", "disk", "diskavailable"]
        )
        # get headers
        headers = data_temp.columns

        # create list of copies of data
        data = [data_temp.copy() for _ in range(num_hosts)]

        for j in range(num_hosts):
            for header in headers:
                data[j][header] = data[j][header].apply(lambda x: json.loads(x)[j])

            # append data to big data
            big_data[j] = big_data[j].append(data[j])

    for i in range(num_hosts):
        big_data[i] = big_data[i].reset_index(drop=True)

    # train and evaluate
    metrics = [[], [], [], []]
    for _ in range(NUMBER_OF_REPETITIONS):
        # split data
        train, test = train_test_split(big_data[0], test_size=0.2)

        # train model
        clf = RandomForestClassifier(n_estimators=100)
        clf.fit(train.iloc[:, :-1], train.iloc[:, -1])

        # predict
        pred = clf.predict(test.iloc[:, :-1])

        # evaluate
        metrics[0].append(accuracy_score(test.iloc[:, -1], pred))
        metrics[1].append(precision_score(test.iloc[:, -1], pred, average="macro"))
        metrics[2].append(recall_score(test.iloc[:, -1], pred, average="macro"))
        metrics[3].append(
            0
            if metrics[1][-1] * metrics[2][-1] == 0
            else 2
            * (metrics[1][-1] * metrics[2][-1])
            / (metrics[1][-1] + metrics[2][-1])
        )

    # plot metrics
    plt.figure()
    plt.boxplot(metrics)
    plt.xticks([1, 2, 3, 4], ["Accuracy", "Precision", "Recall", "F1"])
    plt.savefig(f"{FIGURES_PATH}/metrics_big_data.png")
    if SAVE_SVG:
        plt.savefig(f"{FIGURES_PATH}/metrics_big_data.svg")

    # train in all data
    merged_big_data = pd.DataFrame()
    for i in range(num_hosts):
        merged_big_data = merged_big_data.append(big_data[i])

    merged_big_data = merged_big_data.reset_index(drop=True)
    print(merged_big_data.shape)

    # split data
    train, test = train_test_split(merged_big_data, test_size=0.2)

    # train model
    clf = RandomForestClassifier(n_estimators=100)
    clf.fit(train.iloc[:, :-1], train.iloc[:, -1])

    # predict
    pred = clf.predict(test.iloc[:, :-1])

    # evaluate
    metrics = []
    metrics.append(accuracy_score(test.iloc[:, -1], pred))
    metrics.append(precision_score(test.iloc[:, -1], pred, average="macro"))
    metrics.append(recall_score(test.iloc[:, -1], pred, average="macro"))
    metrics.append(
        0
        if metrics[1] * metrics[2] == 0
        else 2 * (metrics[1] * metrics[2]) / (metrics[1] + metrics[2])
    )

    print(metrics)


def plot_distribution(data, dataset_index):
    num_hosts = len(data)

    # limit color palette to number of hosts
    colors = sns.color_palette(COLOR_PALETTE, num_hosts)

    # count number of cpu failures
    counts_cpu = [list(host["cpufailures"].value_counts()) for host in data]

    # count number of ram failures
    counts_ram = [list(host["ramfailures"].value_counts()) for host in data]

    num_max_labels = max(
        [
            max([len(count)] for count in counts_cpu)[0],
            max([len(count) for count in counts_ram]),
        ]
    )
    # print(f'Number of labels: {num_max_labels}')

    for count in counts_cpu:
        while len(count) < num_max_labels:
            count.append(0)

    for count in counts_ram:
        while len(count) < num_max_labels:
            count.append(0)

    plt.figure()
    fig, ax = plt.subplots(figsize=(15, 5), tight_layout=True)

    x = np.arange(num_max_labels)
    x_labels = [str(label) for label in range(num_max_labels)]

    width = 1 / ((num_hosts * 2) + 1)
    multiplier = 0

    for h_i in range(num_hosts):
        offset = width * multiplier
        multiplier += 1

        # cpu failures
        rects = ax.bar(
            x + offset,
            counts_cpu[h_i],
            width,
            label=f"Host {h_i}",
            color=colors[h_i],
        )

        for rect in rects:
            height = rect.get_height()

            if height > 0:
                ax.annotate(
                    f"{height}",
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),
                    textcoords="offset points",
                    ha="center",
                    va="bottom",
                )

        offset = width * (multiplier + num_hosts - 1)

        # ram failures
        rects = ax.bar(
            x + offset, counts_ram[h_i], width, hatch="///", color=colors[h_i]
        )

        for rect in rects:
            height = rect.get_height()

            if height > 0:
                ax.annotate(
                    f"{height}",
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),
                    textcoords="offset points",
                    ha="center",
                    va="bottom",
                )

    ax.set_xlabel("Stress Intensity")
    ax.set_ylabel("Number of Occurrences")

    ax.set_xticks(x + (num_hosts * 2 - 1) / 2 * width)
    ax.set_xticklabels(x_labels)

    # add invisible data to add second legend
    ax.bar(1, 0, color="gray", label="CPU")
    ax.bar(1, 0, color="gray", hatch="///", label="RAM")

    ax.legend(loc="best")

    plt.savefig(
        f"{FIGURES_PATH}analysis/individuals/data{dataset_index}/png/failure_distribution.png"
    )
    if SAVE_SVG:
        plt.savefig(
            f"{FIGURES_PATH}analysis/individuals/data{dataset_index}/svg/failure_distribution.svg"
        )


def plot_cpu_ram(data, dataset_index):
    num_hosts = len(data)
    individual_data_path = f"{FIGURES_PATH}analysis/individuals/data{dataset_index}/"

    def plot_usage_and_failures(component):
        component_failures = f"{component}failures"

        fig_hos, ax_hos = plt.subplots(
            nrows=num_hosts // 2,
            ncols=1,
            sharex=True,
            sharey=True,
            figsize=(10, num_hosts),
        )

        fig_all, ax_all = plt.subplots(
            nrows=num_hosts,
            ncols=1,
            sharex=True,
            sharey=True,
            figsize=(10, 2 * num_hosts),
        )

        # each row represents a different host
        # x = ["interval"]
        # y = [component]
        # color intervals according to failure intensity [component_failures]

        most_failures = 0
        most_failures_index = 0

        scs_hos = [None for _ in range(num_hosts // 2)]

        for h_i in range(num_hosts):
            # print(f'Host {h_i}')
            # print(f'{component.upper()}: {data[h_i][component]}')
            # print(f'{component.upper()} Failures: {data[h_i][component_failures]}')

            ### INDIVIDUAL ###
            fig_ind, ax_ind = plt.subplots(figsize=(10, 5))
            ax_ind.plot(
                data[h_i]["interval"],
                data[h_i][component],
                color="black",
                label=f"{component.upper()} Usage",
            )

            if h_i in FAULTY_HOSTS:
                # component failures
                sc = ax_ind.scatter(
                    data[h_i]["interval"],
                    data[h_i][component],
                    c=data[h_i][component_failures],
                    cmap="magma_r",
                )

                fig_ind.legend(
                    *sc.legend_elements(),
                    bbox_to_anchor=(1.13, 0.62),
                    title="Stress Intensity",
                )

            ax_ind.set_xlabel("Interval")
            ax_ind.set_ylabel(f"{component.upper()} Usage (%)")

            ax_ind.set_xlim([0, len(data[h_i]["interval"])])
            # ax_ind.set_ylim([0, 100])

            fig_ind.legend(
                *ax_ind.get_legend_handles_labels(), bbox_to_anchor=(1.13, 0.72)
            )

            fig_ind.tight_layout()
            fig_ind.savefig(f"{individual_data_path}png/indiv/{component}_{h_i}.png")
            if SAVE_SVG:
                fig_ind.savefig(
                    f"{individual_data_path}svg/indiv/{component}_{h_i}.svg"
                )

            ### HOST PLOTS ###
            if h_i in FAULTY_HOSTS:
                if max(data[h_i][component_failures]) > most_failures:
                    most_failures = max(data[h_i][component_failures])
                    most_failures_index = h_i

                # component usage
                ax_hos[h_i // 2].plot(
                    data[h_i]["interval"],
                    data[h_i][component],
                    color="black",
                    label=f"{component.upper()} Usage",
                )

                # component failures
                scs_hos[h_i // 2] = ax_hos[h_i // 2].scatter(
                    data[h_i]["interval"],
                    data[h_i][component],
                    c=data[h_i][component_failures],
                    cmap="magma_r",
                )

                # ax_hos[h_i//2].set_ylim([0, 100])
                ax_hos[h_i // 2].set_xlim([0, len(data[h_i]["interval"])])
                ax_hos[h_i // 2].set_title(f"Host {h_i}")

            ### ALL PLOTS (with replicas) ###
            # component usage
            ax_all[h_i].plot(
                data[h_i]["interval"],
                data[h_i][component],
                color="black",
                label=f"{component.upper()} Usage",
            )

            if h_i in FAULTY_HOSTS:
                # component failures
                ax_all[h_i].scatter(
                    data[h_i]["interval"],
                    data[h_i][component],
                    c=data[h_i][component_failures],
                    cmap="magma_r",
                )

            # ax_all[h_i].set_ylim([0, 100])
            ax_all[h_i].set_xlim([0, len(data[h_i]["interval"])])

        # HOST PLOTS
        # xlabel and ylabel in the middle
        fig_hos.supylabel(f"{component.upper()} Usage (%)")
        fig_hos.supxlabel("Interval")

        fig_hos.legend(
            *ax_hos[0].get_legend_handles_labels(), bbox_to_anchor=(1.13, 0.72)
        )
        fig_hos.legend(
            *scs_hos[most_failures_index].legend_elements(),
            bbox_to_anchor=(1.13, 0.62),
            title="Stress Intensity",
        )

        fig_hos.tight_layout()
        fig_hos.savefig(f"{individual_data_path}png/{component}.png")
        if SAVE_SVG:
            fig_hos.savefig(f"{individual_data_path}png/{component}.svg")

        # ALL PLOTS
        # xlabel and ylabel in the middle
        fig_all.supylabel(f"{component.upper()} Usage (%)")
        fig_all.supxlabel("Interval")

        fig_all.legend(
            *ax_all[0].get_legend_handles_labels(), bbox_to_anchor=(1.13, 0.72)
        )
        fig_all.legend(
            *scs_hos[most_failures_index].legend_elements(),
            bbox_to_anchor=(1.13, 0.62),
            title="Stress Intensity",
        )

        fig_all.tight_layout()
        fig_all.savefig(f"{individual_data_path}png/{component}_all.png")
        if SAVE_SVG:
            fig_all.savefig(f"{individual_data_path}png/{component}_all.svg")

    plot_usage_and_failures("cpu")
    plot_usage_and_failures("ram")


def plot_data():
    os.makedirs(os.path.dirname(FIGURES_PATH + "analysis/"), exist_ok=True)
    individual_path = FIGURES_PATH + "analysis/individuals/"
    os.makedirs(os.path.dirname(individual_path), exist_ok=True)

    for i in range(NUMBER_OF_SIMULATIONS):
        print("plotting data for simulation", i)
        os.makedirs(os.path.dirname(f"{individual_path}data{i}/"), exist_ok=True)
        os.makedirs(os.path.dirname(f"{individual_path}data{i}/png/"), exist_ok=True)
        os.makedirs(
            os.path.dirname(f"{individual_path}data{i}/png/indiv/"), exist_ok=True
        )
        os.makedirs(os.path.dirname(f"{individual_path}data{i}/svg/"), exist_ok=True)
        os.makedirs(
            os.path.dirname(f"{individual_path}data{i}/svg/indiv/"), exist_ok=True
        )

        datapath_i = f"{DATAPATH}data/data{i}.csv"
        data_temp = pd.read_csv(datapath_i)

        num_hosts = len(json.loads(data_temp["cpu"][0]))
        # print(f'Number of hosts: {num_hosts}')

        data_temp = data_temp.drop(columns=["disk", "diskavailable"])
        # get headers
        headers = data_temp.columns

        # create list of copies of data
        data = [data_temp.copy() for _ in range(num_hosts)]

        for j in range(len(data)):
            for header in headers:
                if header != "interval":
                    data[j][header] = data[j][header].apply(lambda x: json.loads(x)[j])

        plot_distribution(
            data[::2],  # only hosts, not replicas
            i,
        )

        plot_cpu_ram(data, i)

        return ()

        # plot number pf containers
        fig, ax = plt.subplots(
            nrows=num_hosts // 2, ncols=1, sharex=True, sharey=True, figsize=(10, 5)
        )

        for h_i in range(num_hosts):
            # INDIVIDUAL PLOT
            fig_in, ax_in = plt.subplots(figsize=(10, 5))
            ax_in.plot(data[h_i]["interval"], data[h_i]["numcontainers"])

            # SUBPLOT

            # component usage
            ax[h_i].plot(data[h_i]["interval"], data[h_i]["numcontainers"])

            # ax[h_i].set_ylim([0, 100])
            ax[h_i].set_xlim([0, len(data[h_i]["interval"])])
            ax[h_i].set_title(f"Host {h_i}")

        # ylabel in the middle
        ax[np.floor(num_hosts / 2).astype(int)].set_ylabel(
            f"Number of Containers", loc="center"
        )
        ax[-1].set_xlabel("Interval")
        plt.tight_layout()
        plt.savefig(f"{individual_path}data{i}/numcontainers.png")
        if SAVE_SVG:
            plt.savefig(f"{individual_path}data{i}/numcontainers.svg")


def big_merged_data_eda():
    # Exploratory Data Analysis on the merged data

    big_analysis_path = FIGURES_PATH + "analysis/big_merged_data_eda/"
    os.makedirs(os.path.dirname(big_analysis_path), exist_ok=True)

    os.makedirs(os.path.dirname(big_analysis_path + "pairs/"), exist_ok=True)
    os.makedirs(os.path.dirname(big_analysis_path + "pairs/cpu/"), exist_ok=True)
    os.makedirs(os.path.dirname(big_analysis_path + "pairs/ram/"), exist_ok=True)

    os.makedirs(os.path.dirname(big_analysis_path + "dim_red/"), exist_ok=True)

    # load and merge data

    cpu_headers = {
        "cpu": float,
        "numcontainers": int,
        "baseips": float,
        "ipsavailable": float,
        "ipscap": float,
        "apparentips": float,
        "cpufailures": int,
    }

    ram_headers = {
        "ram": float,
        "numcontainers": int,
        "ram_s": float,
        "ram_r": float,
        "ram_w": float,
        "ramavailable_s": float,
        "ramavailable_r": float,
        "ramavailable_w": float,
        "ramfailures": int,
    }

    # create list for all dataframes
    data_cpu = [None] * NUMBER_OF_SIMULATIONS
    data_ram = [None] * NUMBER_OF_SIMULATIONS

    for i in range(NUMBER_OF_SIMULATIONS):
        datapath_i = f"{DATAPATH}data/data{i}.csv"
        data_temp = pd.read_csv(datapath_i)

        data_temp_cpu = data_temp[cpu_headers.keys()]
        data_temp_ram = data_temp[ram_headers.keys()]

        data_temp_cpu = data_temp_cpu.applymap(lambda x: json.loads(x)[::2]).apply(
            pd.Series.explode
        )
        data_temp_ram = data_temp_ram.applymap(lambda x: json.loads(x)[::2]).apply(
            pd.Series.explode
        )

        data_cpu[i] = data_temp_cpu
        data_ram[i] = data_temp_ram

    merged_big_data_cpu = pd.concat(data_cpu, ignore_index=True)
    merged_big_data_ram = pd.concat(data_ram, ignore_index=True)

    print(merged_big_data_cpu.shape, merged_big_data_ram.shape)
    # (210210, 7) (210210, 9)

    # 0. Divide by 2 the number of failures (each failure level corresponds to 2 containers)
    merged_big_data_cpu["cpufailures"] = merged_big_data_cpu["cpufailures"] // 2
    merged_big_data_ram["ramfailures"] = merged_big_data_ram["ramfailures"] // 2

    # attribute types
    merged_big_data_cpu = merged_big_data_cpu.astype(cpu_headers)
    merged_big_data_ram = merged_big_data_ram.astype(ram_headers)

    # following https://www.digitalocean.com/community/tutorials/exploratory-data-analysis-python

    # 1. Basic Information

    print("\n---- INFO ----")
    print("CPU:")
    print(merged_big_data_cpu.info())
    print("\nRAM:")
    print(merged_big_data_ram.info())

    print("\n---- DESCRIPTION ----")
    print("CPU:\n", merged_big_data_cpu.describe())
    print("\nRAM:\n", merged_big_data_ram.describe())

    #   ---- DESCRIPTION ----
    #   CPU:
    #                    cpu  numcontainers         baseips  ipsavailable         ipscap    apparentips    cpufailures
    #   count  210210.000000  210210.000000  210210.000000  210210.000000  210210.000000  210210.000000  210210.000000
    #   mean       36.338368      12.449065    2613.224643   10721.480119   13334.704762    5730.415599       1.498501
    #   std        14.269751       8.019919    3694.104721   10307.509306   13603.247164    7473.205928       1.118482
    #   min         0.000000       0.000000       0.000000     803.080283    2049.000000       0.000000       0.000000
    #   25%        25.788544       7.000000     309.587890    2513.432869    2848.000000     862.000000       0.000000
    #   50%        34.916865      10.000000     526.387982    3433.303559    3782.500000    1317.000000       1.000000
    #   75%        45.821727      15.000000    3356.711068   18182.780082   21299.000000    7691.000000       2.000000
    #   max       100.000000      52.000000   22736.817807   40960.000000   40960.000000   39800.000000       3.000000
    #
    #   RAM:
    #                   ram   numcontainers          ram_s          ram_r          ram_w  ramavailable_s  ramavailable_r  ramavailable_w    ramfailures
    #   count  210210.000000  210210.000000  210210.000000  210210.000000  210210.000000   210210.000000   210210.000000   210210.000000  210210.000000
    #   mean        7.130378      12.449065    1696.437762       3.038415       1.221677    23618.647952      366.181585      238.314037       1.498501
    #   std         4.239019       8.019919    2651.719945       9.074757       3.751291    26449.240598       11.013360       46.096627       1.118482
    #   min         0.000000       0.000000       0.000000       0.000000       0.000000     1212.807133      231.175467      188.060533       0.000000
    #   25%         4.003028       7.000000     200.625683       0.021200       0.012400     2654.032733      359.926400      199.969867       0.000000
    #   50%         6.487582      10.000000     360.544067       0.094533       0.074133     3624.211100      371.906000      199.997333       1.000000
    #   75%         9.508271      15.000000    2000.960951       0.594133       0.418800    42049.630950      371.988400      299.821600       2.000000
    #   max        43.773429      52.000000   19598.173600     145.364533      78.689467    81920.000000      376.540000      305.000000       3.000000

    # 2. Duplicate Values
    print(
        f"\n---- DUPLICATES:\tCPU: {merged_big_data_cpu.duplicated().sum()}\tRAM: {merged_big_data_ram.duplicated().sum()}"
    )
    #   ---- DUPLICATES:        CPU: 212        RAM: 234

    # 2.1. Drop duplicates
    merged_big_data_cpu.drop_duplicates(inplace=True)
    merged_big_data_ram.drop_duplicates(inplace=True)

    # 5. Missing Values
    print(
        f"\n---- MISSING VALUES ----\nCPU:\n{merged_big_data_cpu.isnull().sum()}\nRAM:\n{merged_big_data_ram.isnull().sum()}"
    )
    #   None

    # Count number of failures
    print(
        f"\n---- CPU FAILURES ----\n{merged_big_data_cpu['cpufailures'].value_counts()}"
    )
    #   0    52501
    #   3    52500
    #   2    52500
    #   1    52497

    print(
        f"\n---- RAM FAILURES ----\n{merged_big_data_ram['ramfailures'].value_counts()}"
    )
    #   0    52501
    #   3    52500
    #   2    52500
    #   1    52475

    """

    # 10. Correlation Matrix
    plt.figure()
    _, ax = plt.subplots(figsize=(10, 9), tight_layout=True)
    corr = merged_big_data_cpu.corr()
    sns.heatmap(corr, annot=True, fmt=".3f", ax=ax)
    plt.savefig(f"{big_analysis_path}correlation_matrix_cpu.png")
    if SAVE_SVG:
        plt.savefig(f"{big_analysis_path}correlation_matrix_cpu.svg")

    # Correlation Matrix shows that there is no strong correlation between cpufailures and [numcontainers, baseips, ipsavailable, ipscap, host_ltype]
    # With this information, we will try to predict cpufailures using all the features and compare it to the results of using only the features that have a correlation with cpufailures
    #   wich are [cpu, apparentips]

    plt.figure()
    _, ax = plt.subplots(figsize=(10, 9), tight_layout=True)
    corr = merged_big_data_ram.corr()
    sns.heatmap(corr, annot=True, fmt=".3f", ax=ax)
    plt.savefig(f"{big_analysis_path}correlation_matrix_ram.png")
    if SAVE_SVG:
        plt.savefig(f"{big_analysis_path}correlation_matrix_ram.svg")

    # Correlation Matrix shows no strong correlation between ramfailures and others
    plt.close('all')

    # plot every feature against cpufailures
    for feature in merged_big_data_cpu.columns:
        if feature != 'cpufailures':
            # 2 subplots:
                # 1. scatter plot
                # 2. box plot

            plt.figure()
            fig, ax = plt.subplots(1,2, figsize=(10, 5), tight_layout=True)


            # 1. scatter plot
            sns.scatterplot(x='cpufailures', y=feature, data=merged_big_data_cpu, ax=ax[0])

            # 2. box plot
            sns.boxplot(x='cpufailures', y=feature, data=merged_big_data_cpu, ax=ax[1])

            plt.savefig(f'{big_analysis_path}pairs/cpu/{feature}_vs_numfailures.png')
            if SAVE_SVG:
                plt.savefig(f'{big_analysis_path}pairs/cpu/{feature}_vs_numfailures.svg')

    for feature in merged_big_data_ram.columns:
        if feature != 'ramfailures':
            # 2 subplots:
                # 1. scatter plot
                # 2. box plot

            plt.figure()
            fig, ax = plt.subplots(1,2, figsize=(10, 5), tight_layout=True)


            # 1. scatter plot
            sns.scatterplot(x='ramfailures', y=feature, data=merged_big_data_ram, ax=ax[0])

            # 2. box plot
            sns.boxplot(x='ramfailures', y=feature, data=merged_big_data_ram, ax=ax[1])

            plt.savefig(f'{big_analysis_path}pairs/ram/{feature}_vs_numfailures.png')
            if SAVE_SVG:
                plt.savefig(f'{big_analysis_path}pairs/ram/{feature}_vs_numfailures.svg')

    plt.close('all')

    
    # Pairplot
    plt.figure()
    sns.pairplot(merged_big_data_cpu, hue='cpufailures')
    plt.savefig(f'{big_analysis_path}pairs/pairplot_cpu.png')
    if SAVE_SVG:
        plt.savefig(f'{big_analysis_path}pairs/pairplot_cpu.svg')

    plt.figure()
    sns.pairplot(merged_big_data_ram, hue='ramfailures')
    plt.savefig(f'{big_analysis_path}pairs/pairplot_ram.png')
    if SAVE_SVG:
        plt.savefig(f'{big_analysis_path}pairs/pairplot_ram.svg')
    plt.close('all')

    """
    # FEATURE SELECTION - CPU

    # select k best features
    # https://www.simplilearn.com/tutorials/machine-learning-tutorial/feature-selection-in-machine-learning
    # the aforementioned tutorial mentions that, for numerical input and categorical output, we should use ANOVA Correlation Coefficient (linear) or Kendall's rank coefficient (non-linear)

    '''
    print("\n---- SELECT K BEST FEATURES - CPU ----")

    print("\n\t-- ANOVA --")

    best_features = SelectKBest(score_func=f_classif, k="all")

    fit = best_features.fit(
        merged_big_data_cpu.drop(columns=["cpufailures"]),
        merged_big_data_cpu["cpufailures"]
    )

    dfscores = pd.DataFrame(fit.scores_)
    dfcolumns = pd.DataFrame(
        merged_big_data_cpu.drop(columns=["cpufailures"]).columns
    )

    featureScores = pd.concat([dfcolumns, dfscores], axis=1)
    featureScores.columns = ["Specs", "Score"]

    print(featureScores.sort_values(by="Score", ascending=False))

    #              Specs        Score
    #   0            cpu  20881.140763
    #   5    apparentips    678.921026
    #   1  numcontainers      2.238390
    #   2        baseips      1.616620
    #   4         ipscap      0.371421
    #   3   ipsavailable      0.304541

    """
    print('\n\t-- KENDALL --')

    best_features = SelectKBest(score_func=kendalltau, k='all')

    fit = best_features.fit(merged_big_data.drop(columns=['cpufailures', 'ramfailures']), merged_big_data['ramfailures'])

    dfscores = pd.DataFrame(fit.scores_)
    dfcolumns = pd.DataFrame(merged_big_data.drop(columns=['cpufailures', 'ramfailures']).columns)

    featureScores = pd.concat([dfcolumns, dfscores], axis=1)
    featureScores.columns = ['Specs', 'Score']

    print(featureScores.sort_values(by='Score', ascending=False))
    """

    print("\n\t-- CHI2 --")

    best_features = SelectKBest(score_func=chi2, k="all")

    fit = best_features.fit(
        merged_big_data_cpu.drop(columns=["cpufailures"]),
        merged_big_data_cpu["cpufailures"].astype("category")
    )

    dfscores = pd.DataFrame(fit.scores_)
    dfcolumns = pd.DataFrame(
        merged_big_data_cpu.drop(columns=["cpufailures"]).columns
    )

    featureScores = pd.concat([dfcolumns, dfscores], axis=1)
    featureScores.columns = ["Specs", "Score"]

    print(featureScores.sort_values(by="Score", ascending=False))

    #              Specs         Score
    #   5    apparentips  1.964843e+07
    #   0            cpu  2.686123e+05
    #   2        baseips  2.531322e+04
    #   4         ipscap  1.546237e+04
    #   3   ipsavailable  9.033255e+03
    #   1  numcontainers  3.460947e+01


    # FEATURE IMPORTANCE - CPU
    print("\n---- FEATURE IMPORTANCE ----")

    model = ExtraTreesClassifier()
    model.fit(
        merged_big_data_cpu.drop(columns=["cpufailures"]),
        merged_big_data_cpu["cpufailures"],
    )

    print(model.feature_importances_)

    feat_importances = pd.Series(
        model.feature_importances_,
        merged_big_data_cpu.drop(columns=["cpufailures"]).columns
    )
    print(feat_importances.sort_values(ascending=False))

    #   apparentips      0.244663
    #   cpu              0.231049
    #   numcontainers    0.145146
    #   baseips          0.143994
    #   ipsavailable     0.141739
    #   ipscap           0.093409

    '''

    """
    # PCA
    print("\n---- PCA ----")

    pca = PCA(n_components=2)
    principalComponents = pca.fit_transform(
        merged_big_data_cpu.drop(columns=["cpufailures"])
    )
    principalDf = pd.DataFrame(
        data=principalComponents,
        columns=["principal component 1", "principal component 2"],
    )

    finalDf = pd.concat(
        [principalDf, merged_big_data_cpu[["cpufailures"]]], axis=1
    )

    print(pca.explained_variance_ratio_)
    # [0.99000531 0.00887902]

    plt.figure(figsize=(8, 6))
    sns.scatterplot(
        x="principal component 1",
        y="principal component 2",
        hue="cpufailures",
        data=finalDf,
        s=100,
        alpha=0.75,
    )

    plt.savefig(f"{big_analysis_path}dim_red/pca_cpu.png")
    if SAVE_SVG:
        plt.savefig(f"{big_analysis_path}dim_red/pca_cpu.svg")

    # TSNE
    # it takes a lot of time to run (~650s)
    print("\n---- TSNE ----")

    tsne = TSNE(n_components=2)
    tsne_results = tsne.fit_transform(
        merged_big_data_cpu.drop(columns=["cpufailures"])
    )
    
    tsneDf = pd.DataFrame(
        data=tsne_results, columns=["tsne component 1", "tsne component 2"]
    )

    finalDf = pd.concat(
        [tsneDf, merged_big_data_cpu[["cpufailures"]]], axis=1
    )

    plt.figure(figsize=(8, 6))
    sns.scatterplot(
        x="tsne component 1",
        y="tsne component 2",
        hue="cpufailures",
        data=finalDf,
        s=100,
        alpha=0.75,
    )

    plt.savefig(f"{big_analysis_path}dim_red/tsne_cpu.png")
    if SAVE_SVG:
        plt.savefig(f"{big_analysis_path}dim_red/tsne_cpu.svg")

    """

    """
    # AI

    # Train and Evaluate with all features - CPU
    metrics, _ = train_and_evaluate(
        merged_big_data_cpu,
        "cpufailures",
        RandomForestClassifier(n_jobs=-1),
        binary=False,
    )
    # binary classification
    metrics_bin, _ = train_and_evaluate(
        merged_big_data_cpu,
        "cpufailures",
        RandomForestClassifier(n_jobs=-1),
        binary=True,
    )

    print(
        f'''\t{'METRICS ALL FEATURES':<48}\t{'METRICS ALL FEATURES (binary)':<48}
        \t{'accuracy':<10}{'precision':<10}{'recall':<10}{'f1':<10}\t\t{'accuracy':<10}{'precision':<10}{'recall':<10}{'f1':<10}
        mean\t{np.mean(metrics[0]):<10.4f}{np.mean(metrics[1]):<10.4f}{np.mean(metrics[2]):<10.4f}{np.mean(metrics[3]):<10.4f}\t\t{np.mean(metrics_bin[0]):<10.4f}{np.mean(metrics_bin[1]):<10.4f}{np.mean(metrics_bin[2]):<10.4f}{np.mean(metrics_bin[3]):<10.4f}
        median\t{np.median(metrics[0]):<10.4f}{np.median(metrics[1]):<10.4f}{np.median(metrics[2]):<10.4f}{np.median(metrics[3]):<10.4f}\t\t{np.median(metrics_bin[0]):<10.4f}{np.median(metrics_bin[1]):<10.4f}{np.median(metrics_bin[2]):<10.4f}{np.median(metrics_bin[3]):<10.4f}
        std\t{np.std(metrics[0]):<10.4f}{np.std(metrics[1]):<10.4f}{np.std(metrics[2]):<10.4f}{np.std(metrics[3]):<10.4f}\t\t{np.std(metrics_bin[0]):<10.4f}{np.std(metrics_bin[1]):<10.4f}{np.std(metrics_bin[2]):<10.4f}{np.std(metrics_bin[3]):<10.4f}
        '''\
    )

    #   METRICS ALL FEATURES                            	METRICS ALL FEATURES (binary)                   
    #    	    accuracy  precision recall    f1        		accuracy  precision recall    f1        
    #   mean	0.6538    0.6490    0.6539    0.6510    		0.9058    0.9371    0.9373    0.9372    
    #   median	0.6538    0.6491    0.6541    0.6511    		0.9058    0.9371    0.9372    0.9373    
    #   std	    0.0017    0.0016    0.0016    0.0016    		0.0010    0.0011    0.0013    0.0007    
       

    # Train and Evaluate with all features - RAM
    metrics, _ = train_and_evaluate(
        merged_big_data_ram,
        "ramfailures",
        RandomForestClassifier(n_jobs=-1),
        binary=False,
    )
    # binary classification
    metrics_bin, _ = train_and_evaluate(
        merged_big_data_ram,
        "ramfailures",
        RandomForestClassifier(n_jobs=-1),
        binary=True,
    )

    print(
        f'''\t{'METRICS ALL FEATURES':<48}\t{'METRICS ALL FEATURES (binary)':<48}
        \t{'accuracy':<10}{'precision':<10}{'recall':<10}{'f1':<10}\t\t{'accuracy':<10}{'precision':<10}{'recall':<10}{'f1':<10}
        mean\t{np.mean(metrics[0]):<10.4f}{np.mean(metrics[1]):<10.4f}{np.mean(metrics[2]):<10.4f}{np.mean(metrics[3]):<10.4f}\t\t{np.mean(metrics_bin[0]):<10.4f}{np.mean(metrics_bin[1]):<10.4f}{np.mean(metrics_bin[2]):<10.4f}{np.mean(metrics_bin[3]):<10.4f}
        median\t{np.median(metrics[0]):<10.4f}{np.median(metrics[1]):<10.4f}{np.median(metrics[2]):<10.4f}{np.median(metrics[3]):<10.4f}\t\t{np.median(metrics_bin[0]):<10.4f}{np.median(metrics_bin[1]):<10.4f}{np.median(metrics_bin[2]):<10.4f}{np.median(metrics_bin[3]):<10.4f}
        std\t{np.std(metrics[0]):<10.4f}{np.std(metrics[1]):<10.4f}{np.std(metrics[2]):<10.4f}{np.std(metrics[3]):<10.4f}\t\t{np.std(metrics_bin[0]):<10.4f}{np.std(metrics_bin[1]):<10.4f}{np.std(metrics_bin[2]):<10.4f}{np.std(metrics_bin[3]):<10.4f}
        '''\
    )

    #   METRICS ALL FEATURES                            	METRICS ALL FEATURES (binary)                   
    #   	    accuracy  precision recall    f1        		accuracy  precision recall    f1        
    #   mean	0.2654    0.2654    0.2654    0.2654    		0.7413    0.7517    0.9783    0.8501    
    #   median	0.2653    0.2653    0.2653    0.2653    		0.7413    0.7512    0.9782    0.8502    
    #   std	    0.0018    0.0018    0.0018    0.0018    		0.0014    0.0014    0.0009    0.0009    
        
    """

    # CPU Random Forest Classifier with grid search
    # Use f1 as scoring metric

    param_grid = {
        "n_estimators": [50, 100, 200, 500],  # default 100
        "criterion": ["gini", "entropy", "log_loss"],  # default "gini"
        "max_depth": [None, 5, 10, 20],  # default None
        "min_samples_split": [2, 5, 10],  # default 2
        "min_samples_leaf": [1, 2, 5],  # default 1
        "max_features": [None, "sqrt", "log2"],  # default "sqrt"
        "bootstrap": [True, False],  # default True
        "n_jobs": [-1],
    }

    # Train and Evaluate with all features - CPU
    print("Train and Evaluate with all features - CPU - multiclass")
    metrics, _ = train_and_evaluate(
        merged_big_data_cpu,
        "cpufailures",
        RandomForestClassifier(),
        binary=False,
        grid_search=True,
        param_grid=param_grid,
    )

    """
    #   Grid search time: 35103.148278713226
    #   {'bootstrap': True, 'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 5, 'min_samples_split': 10, 'n_estimators': 500, 'n_jobs': -1}
    #   RandomForestClassifier(criterion='entropy', max_features=None,
    #                          min_samples_leaf=5, min_samples_split=10,
    #                          n_estimators=500, n_jobs=-1)
    #   Train data
    #                 precision    recall  f1-score   support
    #   
    #              0       0.97      0.99      0.98     55433
    #              1       0.86      0.67      0.75      5901
    #              2       0.85      0.76      0.80      1392
    #              3       0.88      0.43      0.58       141
    #   
    #       accuracy                           0.96     62867
    #      macro avg       0.89      0.71      0.78     62867
    #   weighted avg       0.95      0.96      0.95     62867
    #   
    #   Test data
    #                 precision    recall  f1-score   support
    #   
    #              0       0.96      0.99      0.97     23740
    #              1       0.73      0.58      0.64      2545
    #              2       0.68      0.59      0.63       598
    #              3       0.71      0.28      0.40        61
    #   
    #       accuracy                           0.94     26944
    #      macro avg       0.77      0.61      0.66     26944
    #   weighted avg       0.93      0.94      0.93     26944
    
    #   Grid search f1
    #   {'bootstrap': True, 'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 1, 'min_samples_split': 10, 'n_estimators': 200, 'n_jobs': -1}
    #   RandomForestClassifier(criterion='entropy', max_features=None,
    #                          min_samples_split=10, n_estimators=200, n_jobs=-1)
    #   Train data
    #                 precision    recall  f1-score   support
    #   
    #              0       0.98      1.00      0.99     55433
    #              1       0.91      0.76      0.83      5901
    #              2       0.90      0.82      0.86      1392
    #              3       0.89      0.63      0.74       141
    #   
    #       accuracy                           0.97     62867
    #      macro avg       0.92      0.80      0.85     62867
    #   weighted avg       0.97      0.97      0.97     62867
    #   
    #   Test data
    #                 precision    recall  f1-score   support
    #   
    #              0       0.96      0.98      0.97     23740
    #              1       0.71      0.58      0.64      2545
    #              2       0.69      0.59      0.64       598
    #              3       0.74      0.46      0.57        61
    #   
    #       accuracy                           0.94     26944
    #      macro avg       0.78      0.65      0.70     26944
    #   weighted avg       0.93      0.94      0.93     26944
    """

    # binary classification
    print("Train and Evaluate with all features - CPU - binary")
    metrics_bin, _ = train_and_evaluate(
        merged_big_data_cpu,
        "cpufailures",
        RandomForestClassifier(),
        binary=True,
        grid_search=True,
        param_grid=param_grid,
    )

    #   Grid search time: 5368.719045162201
    #   {'criterion': 'gini', 'max_features': 'sqrt', 'min_samples_leaf': 5, 'min_samples_split': 10, 'n_estimators': 100, 'n_jobs': -1}
    #   RandomForestClassifier(min_samples_leaf=5, min_samples_split=10, n_jobs=-1)
    #   Train data
    #                 precision    recall  f1-score   support
    #
    #              0       0.97      0.99      0.98     55401
    #              1       0.93      0.74      0.82      7466
    #
    #       accuracy                           0.96     62867
    #      macro avg       0.95      0.87      0.90     62867
    #   weighted avg       0.96      0.96      0.96     62867
    #
    #   Test data
    #                 precision    recall  f1-score   support
    #
    #              0       0.96      0.99      0.97     23772
    #              1       0.87      0.67      0.76      3172
    #
    #       accuracy                           0.95     26944
    #      macro avg       0.91      0.83      0.86     26944
    #   weighted avg       0.95      0.95      0.95     26944

    #   Grid search f1 : 5386.9168066978455
    #   {'criterion': 'log_loss', 'max_features': None, 'min_samples_leaf': 5, 'min_samples_split': 5, 'n_estimators': 500, 'n_jobs': -1}
    #   RandomForestClassifier(criterion='log_loss', max_features=None,
    #                          min_samples_leaf=5, min_samples_split=5,
    #                          n_estimators=500, n_jobs=-1)
    #   Train data
    #                 precision    recall  f1-score   support
    #
    #              0       0.97      0.99      0.98     55401
    #              1       0.93      0.76      0.84      7466
    #
    #       accuracy                           0.96     62867
    #      macro avg       0.95      0.88      0.91     62867
    #   weighted avg       0.96      0.96      0.96     62867
    #
    #   Test data
    #                 precision    recall  f1-score   support
    #
    #              0       0.96      0.98      0.97     23772
    #              1       0.86      0.69      0.77      3172
    #
    #       accuracy                           0.95     26944
    #      macro avg       0.91      0.84      0.87     26944
    #   weighted avg       0.95      0.95      0.95     26944

    # RAAAAAAAAAAM

    # Train and Evaluate with all features - RAM
    print("Train and Evaluate with all features - RAM - multiclass")
    metrics_bin, _ = train_and_evaluate(
        merged_big_data_ram,
        "ramfailures",
        RandomForestClassifier(),
        binary=False,
        grid_search=True,
        param_grid=param_grid,
    )

    #   Grid search time: 53953.81897568703
    #   {'bootstrap': True, 'criterion': 'log_loss', 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 200, 'n_jobs': -1}
    #   RandomForestClassifier(criterion='log_loss', min_samples_leaf=2,
    #                          min_samples_split=10, n_estimators=200, n_jobs=-1)
    #   Train data
    #                 precision    recall  f1-score   support
    #
    #              0       0.88      1.00      0.94     55419
    #              1       1.00      0.04      0.07      5923
    #              2       0.00      0.00      0.00      1393
    #              3       0.00      0.00      0.00       136
    #
    #       accuracy                           0.88     62871
    #      macro avg       0.47      0.26      0.25     62871
    #   weighted avg       0.87      0.88      0.83     62871
    #
    #   Test data
    #                 precision    recall  f1-score   support
    #
    #              0       0.88      1.00      0.94     23757
    #              1       0.00      0.00      0.00      2533
    #              2       0.00      0.00      0.00       609
    #              3       0.00      0.00      0.00        46
    #
    #       accuracy                           0.88     26945
    #      macro avg       0.22      0.25      0.23     26945
    #   weighted avg       0.78      0.88      0.83     26945

    #   Grid search f1 : 53972.76392650604
    #   {'bootstrap': False, 'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 100, 'n_jobs': -1}
    #   RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=None,
    #                          n_jobs=-1)
    #   Train data
    #                 precision    recall  f1-score   support
    #
    #              0       1.00      1.00      1.00     55419
    #              1       1.00      1.00      1.00      5923
    #              2       1.00      1.00      1.00      1393
    #              3       1.00      1.00      1.00       136
    #
    #       accuracy                           1.00     62871
    #      macro avg       1.00      1.00      1.00     62871
    #   weighted avg       1.00      1.00      1.00     62871
    #
    #   Test data
    #                 precision    recall  f1-score   support
    #
    #              0       0.88      0.88      0.88     23757
    #              1       0.11      0.11      0.11      2533
    #              2       0.02      0.02      0.02       609
    #              3       0.02      0.02      0.02        46
    #
    #       accuracy                           0.78     26945
    #      macro avg       0.26      0.26      0.26     26945
    #   weighted avg       0.79      0.78      0.79     26945

    # binary classification
    print("Train and Evaluate with all features - RAM - binary")
    metrics_bin, _ = train_and_evaluate(
        merged_big_data_ram,
        "ramfailures",
        RandomForestClassifier(),
        binary=True,
        grid_search=True,
        param_grid=param_grid,
    )

    #   Grid search time: 56693.08396792412
    #   {'bootstrap': True, 'criterion': 'entropy', 'max_features': 'sqrt', 'min_samples_leaf': 5, 'min_samples_split': 2, 'n_estimators': 200, 'n_jobs': -1}
    #   RandomForestClassifier(criterion='entropy', min_samples_leaf=5,
    #                          n_estimators=200, n_jobs=-1)
    #   Train data
    #                 precision    recall  f1-score   support
    #
    #              0       0.88      1.00      0.94     55431
    #              1       1.00      0.01      0.01      7440
    #
    #       accuracy                           0.88     62871
    #      macro avg       0.94      0.50      0.48     62871
    #   weighted avg       0.90      0.88      0.83     62871
    #
    #   Test data
    #                 precision    recall  f1-score   support
    #
    #              0       0.88      1.00      0.94     23745
    #              1       0.00      0.00      0.00      3200
    #
    #       accuracy                           0.88     26945
    #      macro avg       0.44      0.50      0.47     26945
    #   weighted avg       0.78      0.88      0.83     26945

    #   Grid search f1 : 56717.54580140114
    #   {'bootstrap': False, 'criterion': 'log_loss', 'max_features': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 50, 'n_jobs': -1}
    #   RandomForestClassifier(bootstrap=False, criterion='log_loss', max_features=None,
    #                          n_estimators=50, n_jobs=-1)
    #   Train data
    #                 precision    recall  f1-score   support
    #
    #              0       1.00      1.00      1.00     55431
    #              1       1.00      1.00      1.00      7440
    #
    #       accuracy                           1.00     62871
    #      macro avg       1.00      1.00      1.00     62871
    #   weighted avg       1.00      1.00      1.00     62871
    #
    #   Test data
    #                 precision    recall  f1-score   support
    #
    #              0       0.88      0.88      0.88     23745
    #              1       0.12      0.13      0.12      3200
    #
    #       accuracy                           0.79     26945
    #      macro avg       0.50      0.50      0.50     26945
    #   weighted avg       0.79      0.79      0.79     26945


def test():
    # plot ram from datasets

    # read data 1
    datapath = (
        "logs/MyFog_MyAzure2019Workload_100_6_30_10000_300_1/hostinfo_with_interval.csv"
    )
    data = pd.read_csv(datapath)

    num_hosts = 3

    headers = [
        "ram_s",
        "ram_r",
        "ram_w",
        "ramavailable_s",
        "ramavailable_r",
        "ramavailable_w",
    ]

    data = data[["interval"] + headers]

    hosts = [data.copy() for _ in range(num_hosts)]

    for i in range(num_hosts):
        for h in headers:
            hosts[i][h] = hosts[i][h].apply(lambda x: ast.literal_eval(x)[i])

        print(hosts[i].head())
        print(hosts[i].describe())

    # plot with 'interval' as x axis

    # polot horizontal line in each plot
    list_ram = [[4295, 17180, 34360], [372.0, 360.0, 376.54], [200.0, 305.0, 266.75]]

    _, ax = plt.subplots(3, 3, figsize=(15, 10))
    for i, host in enumerate(hosts):
        for r in ["ram", "ramavailable"]:
            for j, hh in enumerate(["s", "r", "w"]):
                ax[i][j].axhline(y=list_ram[j][i], color="r", linestyle="-")
                sns.lineplot(x="interval", y=f"{r}_{hh}", data=host, ax=ax[i][j])

    plt.savefig("ram.png")
    if SAVE_SVG:
        plt.savefig("ram.svg")


def train_and_evaluate(
    data, y_col, model, data_test=None, binary=False, grid_search=False, param_grid=None
):
    """
    Train and evaluate a model using the given data and model
    It will run NUMBER_OF_REPETITIONS times

    Parameters
    ----------
    data : pandas.DataFrame
        Data to train and evaluate the model
    y_col : str
        Name of the column to predict
    model : sklearn.model
        Model to train and evaluate
    data_test : pandas.DataFrame, optional
        Test data to evaluate the model, by default None
    binary : bool, optional
        If True, the data will be converted to binary, by default False
    grid_search : bool, optional
        If True, the model will be trained using grid search, by default False
    param_grid : dict, optional
        Dictionary with the parameters to use in grid search, by default None
        When grid_search is True, param_grid must be provided

    Returns
    -------
    list
        List of metrics [accuracy, precision, recall, f1]
    tuple
        Tuple with the best predicted values and respective f1 score
    """

    # create a copy of the data
    data = data.copy()

    if binary:
        data[y_col] = data[y_col].apply(lambda x: 1 if x > 0 else 0)

    if grid_search:
        if not param_grid:
            print("param_grid must be provided for grid search")
            return

        # split data if test data is not provided
        if data_test is None:
            train, test = train_test_split(data, test_size=0.3, shuffle=True)
        else:
            train = data
            test = data_test

        x_train = train.drop(columns=[y_col])
        y_train = train[y_col]

        x_test = test.drop(columns=[y_col])
        y_test = test[y_col]

        ## NORMAL GRID SEARCH

        t = time.time()

        grid = GridSearchCV(
            model,
            param_grid,
            n_jobs=-1,
            cv=5,
            refit=True,
            return_train_score=True,
        )

        grid.fit(x_train, y_train)

        print(f"Grid search time: {time.time() - t:.2f} seconds for {len(grid.cv_results_['params'])} candidates parameter settings.")

        print(grid.best_params_)
        print(grid.best_estimator_)

        # save results
        results = pd.DataFrame(grid.cv_results_)
        results.to_csv(f"AI/balanced_tree/1000i_1.0fr_15ft_5rt_5fit_hosts024681012_acc_cr/grid_search_{y_col}_{'bin' if binary else 'multi'}_acc.csv", index=False)

        # evaluate train data and test data

        print("Train data")
        y_pred = grid.predict(x_train)

        print(classification_report(y_train, y_pred))

        print("Test data")

        y_pred = grid.predict(x_test)

        print(classification_report(y_test, y_pred))

        ## GRID SEARCH WITH F1 SCORING

        t = time.time()

        grid = GridSearchCV(
            model,
            param_grid,
            scoring=make_scorer(f1_score, average="binary" if binary else "macro"),
            n_jobs=-1,
            cv=5,
            refit=True,
            return_train_score=True,
        )

        grid.fit(x_train, y_train)

        print(f"Grid search f1 time: {time.time() - t:.2f} seconds for {len(grid.cv_results_['params'])} candidates parameter settings.")

        print(grid.best_params_)
        print(grid.best_estimator_)

        # save results
        results = pd.DataFrame(grid.cv_results_)
        results.to_csv(f"AI/balanced_tree/1000i_1.0fr_15ft_5rt_5fit_hosts024681012_acc_cr/grid_search_{y_col}_{'bin' if binary else 'multi'}_f1.csv", index=False)

        # evaluate train data and test data

        print("Train data")
        y_pred = grid.predict(x_train)

        print(classification_report(y_train, y_pred))

        print("Test data")

        y_pred = grid.predict(x_test)

        print(classification_report(y_test, y_pred))

        return None, None

    metrics = [[], [], [], []]
    best_f1 = 0
    y_pred_best = None
    for _ in range(NUMBER_OF_REPETITIONS):
        # split data if test data is not provided
        if data_test is None:
            train, test = train_test_split(data, test_size=0.3, shuffle=True)
        else:
            train = data
            test = data_test

        x_train = train.drop(columns=[y_col])
        y_train = train[y_col]

        x_test = test.drop(columns=[y_col])
        y_test = test[y_col]

        # train and predict
        model.fit(x_train, y_train)
        y_pred = model.predict(x_test)

        # evaluate
        metrics[0].append(accuracy_score(y_test, y_pred))
        metrics[1].append(
            precision_score(y_test, y_pred, average="binary" if binary else "macro")
        )
        metrics[2].append(
            recall_score(y_test, y_pred, average="binary" if binary else "macro")
        )
        metrics[3].append(
            f1_score(y_test, y_pred, average="binary" if binary else "macro")
        )

        # Why macro? https://towardsdatascience.com/micro-macro-weighted-averages-of-f1-score-clearly-explained-b603420b292f
        # Because the classes are imbalanced, so we want to give the same importance to each class. average='weighted' would give more importance to the majority class

        # copilot sugested the following link: https://datascience.stackexchange.com/questions/15989/micro-average-vs-macro-average-performance-in-a-multiclass-classification-settin

        if metrics[3][-1] > best_f1:
            best_f1 = metrics[3][-1]
            y_pred_best = y_pred

    return metrics, (y_pred_best, best_f1)


def plot_metrics(metrics, name):
    """
    Plot the metrics

    Parameters
    ----------
    metrics : list
        List of metrics to plot [accuracy, precision, recall, f1]
    name : str
        Name of the file to save the plot
    """

    plt.figure()
    plt.boxplot(metrics)
    plt.xticks([1, 2, 3, 4], ["Accuracy", "Precision", "Recall", "F1"])
    plt.savefig(f"{FIGURES_PATH}metrics/{name}.png")
    if SAVE_SVG:
        plt.savefig(f"{FIGURES_PATH}metrics/{name}.svg")


if __name__ == "__main__":
    time_start = time.time()

    generate_datasets()

    # plot_data()

    # train_and_evaluate_big_data()

    # big_merged_data_eda()

    # test()

    print(f"Time taken: {time.time() - time_start}")
